@startuml Manage Booking (UPDATE)

header Booking Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Booking (UPDATE)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:bookings" as routerBookings
participant "<<controllers>>\n:bookings" as controllersBookings
participant "<<model>>\n:Booking" as modelBooking
database "<<MongoDB>>\n:bookings" as BookingsDatabase

client->server ++:req.put('/bookings/:id')
server->routerBookings ++:app.use('/bookings',bookings)
routerBookings -> controllersBookings ++:updateBooking()
controllersBookings->modelBooking ++:findById(req.params.id)
modelBooking ->BookingsDatabase ++: bookingSchema
BookingsDatabase --> modelBooking --: booking
controllersBookings <-- modelBooking --:booking
alt booking existed
    alt user is booking's owner || user is admin
        controllersBookings->modelBooking ++:findByIdAndUpdate(req.params.id, req.body, {new: true, runValidators: true,})
        modelBooking ->BookingsDatabase ++: bookingSchema
        BookingsDatabase --> modelBooking --: booking
        controllersBookings <-- modelBooking --:booking
        controllersBookings->client --:200 {success: true, data: booking}
    else user is not booking's woner && user is not admin
        controllersBookings->client --:401 {success: false, message: `User ${req.user.id} is not authorized to update this booking`}
    end
else booking not existed
    controllersBookings->client --:404 {success: false, message: `No booking with the id of ${req.params.id}`}
end

@enduml