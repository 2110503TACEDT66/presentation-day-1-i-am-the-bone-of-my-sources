@startuml Manage Booking (CREATE)

header Booking Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Booking (CREATE)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:campgrounds" as routerCampgrounds
participant "<<router>>\n:bookings" as routerBookings
participant "<<controllers>>\n:bookings" as controllersBookings
participant "<<model>>\n:Campground" as modelCampground
participant "<<model>>\n:Booking" as modelBooking
database "<<MongoDB>>\n:bookings" as BookingsDatabase
database "<<MongoDB>>\n:campgrounds" as CampgroundsDatabase

client->server ++:req.post('/campgrounds/:campgroundId/bookings')
server->routerCampgrounds ++:app.use('/campgrounds',campgrounds)
routerCampgrounds->routerBookings ++:router.use('/:campgroundId/bookings', bookingRouter);
routerBookings -> controllersBookings ++:addBooking()
controllersBookings->modelCampground ++:findById(req.params.id)
modelCampground ->CampgroundsDatabase ++: campgroundSchema
CampgroundsDatabase --> modelCampground --: campground
controllersBookings <-- modelCampground --:campground
alt Campground existed
    controllersBookings->modelBooking ++:create(req.body)
    modelBooking ->BookingsDatabase ++: bookingSchema
    BookingsDatabase --> modelBooking --: existedBooking
    controllersBookings <-- modelBooking --: existedBooking
    alt existedBooking.length >= 3 && req.user.role !== 'admin'
        controllersBookings->client --:200 {success: true, data: booking}
    else existedBooking.length < 3 || req.user.role === 'admin'
        controllersBookings->client --:400 {success: false, message: `The user with ID ${req.user.id} has already made 3 bookings.`}
    end
else Campground not existed
    controllersBookings->client --:404 {success: false, message: `No campground with the id of ${req.params.campgroundId}`}
end
@enduml